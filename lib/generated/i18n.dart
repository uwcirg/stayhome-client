import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get activity => "Activity";
  String get add_the_default_careplan_for_me => "Add the default CarePlan for me";
  String get buttonPushText => "You have pushed the button this many times:";
  String get change => "Change";
  String get contact__community => "Contact";
  String get demoVersionBannerText => "Demo version - not for clinical use.";
  String get developedByCIRG => "Developed by the Clinical Informatics Research Group (CIRG) at University of Washington, 2019.";
  String get devices => "Devices";
  String get email => "Email";
  String get forget => "Forget";
  String get hello => "Hello!";
  String get help => "Help";
  String get language => "Language";
  String get languageName => "English (EN)";
  String get learning_center => "Learning center & Help";
  String get login => "Login";
  String get logout => "Logout";
  String get more_info => "More info";
  String get my_treatment_plan => "My Treatment Plan";
  String get name => "Name";
  String get not_now => "Not now";
  String get patient_resource_id => "Patient Resource ID";
  String get plan => "My calendar";
  String get profile => "Profile";
  String get progress__insights => "My goals";
  String get read_our_blog => "Read our Blog";
  String get rename => "Rename";
  String get session_expired_please_log_in_again => "Session expired, please log in again.";
  String get sign_up_or_log_in_to_access_all_functions => "Sign up or Log in to access all functions";
  String get start_a_session => "Start a session";
  String get testimonials => "Testimonials";
  String get timeFormat => "h:mm:ss aaa";
  String get treatment_calendar => "Treatment Calendar";
  String get vfit_faq => "vFit FAQ";
  String get visit_our_facebook_page => "Visit our Facebook Page";
  String get what_is_your_email_address => "What is your email address?";
  String get what_is_your_name => "What is your name?";
  String get what_is_your_patient_resource_id => "What is your Patient Resource ID?";
  String get womens_health_resources => "Women's Health Resources";
  String get you_have_no_active_pelvic_floor_management_careplan => "You have no active Pelvic Floor Management Careplan.";
  String battery_level(String _device) => "$_device% charged";
  String duration_duration_durationunit(String duration, String durationUnit) => "Duration: $duration $durationUnit";
  String frequency_with_contents(String number, String unit) => "Frequency: Once every $number $unit";
  String last_synced_date(String _date, String _time) => "Last synced: $_date at $_time";
  String time_left_until_token_expiration(String _timeLeftInSeconds) => "Time left until token expiration: $_timeLeftInSeconds seconds";
  String versionString(String version) => "Version $version";
}

class $de extends S {
  const $de();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get what_is_your_patient_resource_id => "Wie lautet ihre Patientenressourcen-ID?";
  @override
  String get activity => "Aktivität";
  @override
  String get read_our_blog => "Lesen Sie unseren Blog";
  @override
  String get about => "Über";
  @override
  String get more_info => "Weitere details";
  @override
  String get language => "Sprache";
  @override
  String get progress__insights => "Meine Ziele";
  @override
  String get sign_up_or_log_in_to_access_all_functions => "Bitte melden Sie sich an, um auf alle Funktionen zuzugreifen.";
  @override
  String get you_have_no_active_pelvic_floor_management_careplan => "Sie haben keinen aktiven Beckenbodenpflegeplan.";
  @override
  String get login => "Anmelden";
  @override
  String get learning_center => "Lernzentrum";
  @override
  String get not_now => "Jetzt nicht";
  @override
  String get languageName => "Deutsch (DE)";
  @override
  String get logout => "Abmelden";
  @override
  String get add_the_default_careplan_for_me => "Den Standardpflegeplan hinzufügen";
  @override
  String get what_is_your_email_address => "Was ist Ihre E-Mail Adresse?";
  @override
  String get visit_our_facebook_page => "Besuchen Sie uns auf Facebook";
  @override
  String get start_a_session => "Start a session";
  @override
  String get my_treatment_plan => "Mein Behandlungsplan";
  @override
  String get plan => "Plan";
  @override
  String get email => "E-Mail";
  @override
  String get session_expired_please_log_in_again => "Session abgelaufen, bitte erneut einloggen.";
  @override
  String get what_is_your_name => "Wie heißen Sie?";
  @override
  String get devices => "Geräte";
  @override
  String get profile => "Profil";
  @override
  String get buttonPushText => "Der Knopf wurde so oft gedrückt:";
  @override
  String get change => "Ändern";
  @override
  String get womens_health_resources => "Bildungsressourcen zu frauenspezifischen Gesundheitsthemen";
  @override
  String get contact__community => "Kontakt & Gemeinschaft";
  @override
  String get developedByCIRG => "Entwickelt von der Clinical Informatics Research Group (CIRG) an der University of Washington, 2019.";
  @override
  String get patient_resource_id => "Patient Resource ID";
  @override
  String get vfit_faq => "vFit Häufig Gestellte Fragen";
  @override
  String get help => "Hilfe";
  @override
  String get testimonials => "Kundenreferenzen";
  @override
  String get forget => "Vergessen";
  @override
  String get rename => "Umbenennen";
  @override
  String get timeFormat => "H:mm:ss";
  @override
  String get demoVersionBannerText => "Demo version - nicht für den klinischen Gebrauch vorgesehen.";
  @override
  String get name => "Name";
  @override
  String get hello => "Hallo!";
  @override
  String get treatment_calendar => "Behandlungskalender";
  @override
  String last_synced_date(String _date, String _time) => "Zuletzt synchronisiert: $_date at $_time";
  @override
  String battery_level(String _device) => "$_device% geladen";
  @override
  String versionString(String version) => "Version $version";
  @override
  String duration_duration_durationunit(String duration, String durationUnit) => "Dauer: $duration $durationUnit";
  @override
  String frequency_with_contents(String number, String unit) => "Häufigkeit: $number Mal pro $unit";
  @override
  String time_left_until_token_expiration(String _timeLeftInSeconds) => "Zeit bis Token abläuft: $_timeLeftInSeconds Sekunden";
}

class $mn extends S {
  const $mn();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get what_is_your_patient_resource_id => "What is your Patient Resource ID?";
  @override
  String get activity => "Activity";
  @override
  String get read_our_blog => "Read our Blog";
  @override
  String get about => "About. The honorary stem taxes my unread beast.";
  @override
  String get more_info => "More info";
  @override
  String get language => "Language";
  @override
  String get progress__insights => "Intricate Concurrence Progress & Capillary Rainforest Insights";
  @override
  String get sign_up_or_log_in_to_access_all_functions => "Sign up or Log in to access all functions. Why does the advantage attempt a lighted representative?";
  @override
  String get you_have_no_active_pelvic_floor_management_careplan => "You have no active Pelvic Floor Management Careplan.";
  @override
  String get login => "Login. The lowering holiday mutters.";
  @override
  String get learning_center => "Learning Center of the Thirstier Halibut";
  @override
  String get not_now => "Not now, utilitarian chaplain!";
  @override
  String get languageName => "Long (MN) How will the bitter cry glow within a garage?";
  @override
  String get logout => "Logout. The jail exchanges a bass outset near a parody.";
  @override
  String get add_the_default_careplan_for_me => "Add the default CarePlan for me";
  @override
  String get what_is_your_email_address => "What is your email address?";
  @override
  String get visit_our_facebook_page => "Visit our Facebook Page";
  @override
  String get start_a_session => "Start a session";
  @override
  String get my_treatment_plan => "My Treatment Plan";
  @override
  String get plan => "Plan zigzag email";
  @override
  String get email => "Email expansive somersaulting";
  @override
  String get session_expired_please_log_in_again => "Session expired, please log in again. The legendary highlight staggers outside the silicon.";
  @override
  String get what_is_your_name => "What is your name?";
  @override
  String get devices => "Hale Ticking Devices";
  @override
  String get profile => "Profile. The ancestor exists?";
  @override
  String get buttonPushText => "You have pushed the button this many times:";
  @override
  String get change => "Change";
  @override
  String get womens_health_resources => "Women's Health Resources \nWhy does the indent dictate?\n";
  @override
  String get contact__community => "Contact & Community";
  @override
  String get developedByCIRG => "Developed by the Clinical Informatics Research Group (CIRG) at University of Washington, 2019. The gut gowns a worm. A lifestyle stares! The mercury rails! The bite suffixes the bench across a big moron. When can the symmetry dictate the typical cry?";
  @override
  String get patient_resource_id => "Patient Resource ID";
  @override
  String get vfit_faq => "vFit FAQ This crying average frustrates the genetics.";
  @override
  String get help => "Help! When will the performance interfere?";
  @override
  String get testimonials => "Testimonials Each layer starts the market over each historic eyesight.";
  @override
  String get forget => "Forget";
  @override
  String get rename => "Rename";
  @override
  String get timeFormat => "h:mm:ss aaa";
  @override
  String get demoVersionBannerText => "Demo version - not for clinical use. Into the normal lunchtime glows the fast union.";
  @override
  String get name => "Name";
  @override
  String get hello => "Hello! Should the expected muck caution?";
  @override
  String get treatment_calendar => "Treatment Calendar";
  @override
  String last_synced_date(String _date, String _time) => "Last synced: $_date at $_time";
  @override
  String battery_level(String _device) => "$_device% charged";
  @override
  String versionString(String version) => "Why won't the clearance hook the isolate artist? Version $version The still galaxy flies within a racial conscience.";
  @override
  String duration_duration_durationunit(String duration, String durationUnit) => "Duration: $duration $durationUnit";
  @override
  String frequency_with_contents(String number, String unit) => "Frequency: Once every $number $unit";
  @override
  String time_left_until_token_expiration(String _timeLeftInSeconds) => "Time left until token expiration: $_timeLeftInSeconds seconds, The misleading dinner explains the taxi. A postal regime graduates before a substance. How will the applicable bog try? A pointed abstract scans the bored heaven.";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("de", ""),
      Locale("mn", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "de":
          return SynchronousFuture<S>(const $de());
        case "mn":
          return SynchronousFuture<S>(const $mn());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
